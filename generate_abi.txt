modules=("order" "matcher" "engine" "bitmap" "tick" "mock-usdc" "mock-weth" "balance-manager" "pool-manager" "pool-orderbook")

# Define the export ABI command
export_abi_command="cargo stylus export-abi"

# Loop through each module and export ABI
for module in "${modules[@]}"; do
  echo "Exporting ABI for $module..."
  output=$(cd "$(dirname "$0")/$module" && $export_abi_command )
  
  # Extract the interface from the output
  abi_interface=$(echo "$output" | awk '/interface/,/}/')

  # Check if the module has events defined in its lib.rs file
  events=$(awk '/sol! *{/,/}/' "$(dirname "$0")/$module/src/lib.rs" | grep 'event')

  # If events are found, insert them into the interface
  if [ -n "$events" ]; then
    # Add a newline after each event
    formatted_events=$(echo "$events" | sed 's/$/\\n/')
    abi_interface=$(echo "$abi_interface" | awk -v events="$formatted_events" '/interface/{print; print events; next}1')
  fi

  # Add the header and license information
  abi_interface=$(cat <<EOF
/**
 * This file was automatically generated by Stylus and represents a Rust program.
 * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).
 */

// SPDX-License-Identifier: MIT-OR-APACHE-2.0
pragma solidity ^0.8.23;

$abi_interface
EOF
)

  # Create the ABI file name based on the interface pattern
  # abi_interface_name=$(echo "$abi_interface" | awk '/interface/{print $2}')
  abi_file_name="${module}.sol"

  # Define the path to the ABI file in the root directory
  abi_file_path="$(dirname "$0")/contracts/$abi_file_name"

  # Ensure the ABI file exists
  touch "$abi_file_path"

  # Write the extracted interface to the ABI file, replacing it if it exists
  echo "$abi_interface" > "$abi_file_path"
  
  echo "Exported ABI for $module to contracts/$abi_file_name"
done

# this parts need solc installed in your local


# Loop through each .sol file in the contracts directory
for sol_file in "$(dirname "$0")/contracts"/*.sol; do
  # Extract the base name of the file without extension
  base_name=$(basename "$sol_file" .sol)
  
  # Compile the .sol file to generate the ABI
  solc --abi "$sol_file" -o "$(dirname "$0")/contracts"

  # Define the ABI file path using regex to match the pattern
  abi_file_path="$(dirname "$0")/contracts/$(echo "$base_name" | sed -r 's/(.*)/\1_sol_.*\.abi/')"

  # Read the ABI content
  abi_content=$(cat "$abi_file_path")

  # Extract the ABI array from the content
  abi_array=$(echo "$abi_content" | awk '/\[/{flag=1; next} /\]/{flag=0} flag')

  # Define the TypeScript and JSON file paths
  ts_file_path="$(dirname "$0")/contracts/${base_name}.ts"
  json_file_path="$(dirname "$0")/contracts/${base_name}.json"

  # Write the ABI array to the TypeScript file
  echo "export const $(echo "${base_name}" | sed -r 's/(^|-)([a-z])/\U\2/g') = [${abi_array}];" > "$ts_file_path"

  # Write the ABI array to the JSON file
  echo "{ \"abi\": [${abi_array}] }" > "$json_file_path"

  echo "Generated ${base_name}.ts and ${base_name}.json from ${base_name}.abi"
done

