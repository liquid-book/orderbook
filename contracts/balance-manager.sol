/**
 * This file was automatically generated by Stylus and represents a Rust program.
 * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).
 */

// SPDX-License-Identifier: MIT-OR-APACHE-2.0
pragma solidity ^0.8.23;

interface IBalanceManager {
    event Deposit(address indexed user, address indexed token, uint256 amount);

    event Withdrawal(address indexed user, address indexed token, uint256 amount);

    event BalanceUpdated(address indexed user, address indexed token, uint256 amount);

    event OperatorSet(address indexed user, address indexed operator, bool approved);

    function initialize(address owner) external;

    function getBalance(address user, address token) external view returns (uint256);

    function getLockedBalance(address user, address operator, address token) external view returns (uint256);

    function deposit(address token, uint256 amount) external;

    function withdraw(address token, uint256 amount) external;

    function setOperator(address operator, bool approved) external returns (bool);

    function lock(address user, address operator, address token, uint256 amount) external;

    function unlock(address user, address operator, address token, uint256 amount) external;

    function transferLocked(address sender, address operator, address receiver, address token, uint256 amount) external;

    error AlreadyInitialized();

    error InsufficientBalance(address, address, uint256, uint256);

    error ZeroAmount();

    error TransferError(address, address, uint256);

    error UnauthorizedOperator(address, address);
}
